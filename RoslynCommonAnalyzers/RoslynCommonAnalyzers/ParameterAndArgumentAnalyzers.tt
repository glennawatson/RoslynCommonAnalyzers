<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="Microsoft.CodeAnalysis.CSharp" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ output extension=".cs" #>
<#

    var kinds = new (string Kind, string SyntaxNodeType, bool IsParameter, bool HasInner)[]
    {
        (nameof(SyntaxKind.ConstructorDeclaration), nameof(BaseMethodDeclarationSyntax), true, false),
		(nameof(SyntaxKind.MethodDeclaration), nameof(BaseMethodDeclarationSyntax), true, false),
        (nameof(SyntaxKind.DelegateDeclaration), nameof(DelegateDeclarationSyntax), true, false),
        (nameof(SyntaxKind.IndexerDeclaration), nameof(IndexerDeclarationSyntax), true, true),
        (nameof(SyntaxKind.InvocationExpression), nameof(InvocationExpressionSyntax), false, false),
        (nameof(SyntaxKind.ObjectCreationExpression), nameof(ObjectCreationExpressionSyntax), false, false),
        (nameof(SyntaxKind.ElementAccessExpression), nameof(ElementAccessExpressionSyntax), false, true),
        (nameof(SyntaxKind.Attribute), nameof(AttributeSyntax), false, true),
        (nameof(SyntaxKind.AnonymousMethodExpression), nameof(AnonymousMethodExpressionSyntax), true, false),
        (nameof(SyntaxKind.ParenthesizedLambdaExpression), nameof(ParenthesizedLambdaExpressionSyntax), true, false),
    };
#>
// Copyright (c) 2023 Glenn Watson. All rights reserved.
// Glenn Watson licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

namespace RoslynCommonAnalyzers;

#pragma warning disable SA1518
#pragma warning disable SA1402
#pragma warning disable SA1649

<#
int i = 1;
foreach (var (kind, syntaxNodeType, isParameter, hasInner) in kinds)
{
    var code = "RCGS" + i.ToString("D4");
    var parameterType = isParameter ? "Parameter" : "Argument";
    var accessMethod = isParameter ? "ParameterList" : "ArgumentList";
#>
/// <summary>
/// Analyzer that makes sure that <#=parameterType#>s are on unique lines.
/// </summary>
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class <#=code#><#=kind#><#=parameterType#>MustBeOnUniqueLinesAnalyzer : DiagnosticAnalyzer
{
    /// <summary>
    /// The diagnostic code for the analyzer.
    /// </summary>
    public const string DiagnosticId = "<#=code#>";

    private const string Category = "Readability";

    // You can change these strings in the Resources.resx file. If you do not want your analyzer to be localize-able, you can use regular strings for Title and MessageFormat.
    // See https://github.com/dotnet/roslyn/blob/main/docs/analyzers/Localizing%20Analyzers.md for more on localization
    private static readonly LocalizableString Title = new LocalizableResourceString(nameof(Resources.<#=parameterType #>AnalyzerTitle), Resources.ResourceManager, typeof(Resources));
    private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(Resources.<#=parameterType #>AnalyzerMessageFormat), Resources.ResourceManager, typeof(Resources));
    private static readonly LocalizableString Description = new LocalizableResourceString(nameof(Resources.<#=parameterType #>AnalyzerDescription), Resources.ResourceManager, typeof(Resources));

    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: Description);

    /// <inheritdoc/>
    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);

    /// <inheritdoc/>
    public override void Initialize(AnalysisContext context)
    {
        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
        context.EnableConcurrentExecution();

        context.RegisterSyntaxNodeAction(Analyze, SyntaxKind.<#=kind#>);
    }

    private static void Analyze(SyntaxNodeAnalysisContext context) => context.Handle<#=parameterType#>ListSyntax(((<#=syntaxNodeType#>)context.Node).<#=accessMethod#>, Rule);
}

<#
    i++;
}
#>